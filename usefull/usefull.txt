1. Se connecter à MySQL via la ligne de commande
Si tu es sur Linux ou macOS, tu peux utiliser la commande suivante pour te connecter à MySQL :


mysql -u root -p
Cela te demandera ton mot de passe pour l'utilisateur root. Si tu n'as pas défini de mot de passe, laisse-le vide.

Si tu utilises un autre utilisateur que root, remplace root par le nom d'utilisateur approprié.

2. Afficher les bases de données disponibles
Une fois connecté à MySQL, tu peux voir toutes les bases de données disponibles avec la commande :


SHOW DATABASES;
Cela te montrera toutes les bases de données existantes.

3. Sélectionner la base de données
Si tu veux voir une base de données spécifique, sélectionne-la avec :


USE nom_de_la_base;
Remplace nom_de_la_base par le nom de ta base de données.

4. Afficher les tables dans la base de données
Pour voir les tables de la base de données sélectionnée, utilise la commande :


SHOW TABLES;
5. Afficher le contenu d'une table
Si tu veux voir le contenu d'une table (par exemple, users), utilise la commande suivante :


SELECT * FROM users;
Cela te donnera toutes les données de la table users.


DEMARRER BASE DE DONNEE 
sudo mariadb
sudo systemctl start mariadb
USE mon_api;

DEMARRER NODE 
node index.js+




Page api 
import { useEffect, useState } from 'react';
import api from './services/api';

function App() {
  const [users, setUsers] = useState([]);
  const [nom, setNom] = useState('');
  const [mail, setMail] = useState('');

  useEffect(() => {
    api.get('/users')
      .then(res => {
        setUsers(res.data);
      })
      .catch(err => {
        console.error(err);
      });
  }, []);

  // Fonction pour envoyer un nouvel utilisateur
  const handleSubmit = (e) => {
    e.preventDefault(); // Empêche la page de se recharger

    // Envoi des données au serveur
    api.post('/users', {
      name: nom,
      email: mail
    })
      .then((res) => {
        // Mettre à jour la liste des utilisateurs avec le nouvel utilisateur
        setUsers([...users, res.data]);
        setNom(''); // Réinitialiser le champ nom
        setMail(''); // Réinitialiser le champ mail
      })
      .catch((err) => {
        console.error(err);
      });
  };


  // Fonction pour supprimer un utilisateur
  const handleDelete = (id) => {
    api.delete(`/users/${id}`)
      .then((res) => {
        // Supprime l'utilisateur de la liste
        setUsers(users.filter(user => user.id !== id));
        console.log(res.data);
      })
      .catch((err) => {
        console.error(err); 
      });
  };

  return (
    <div>
      <h1>Liste des utilisateurs</h1>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            {user.name} - {user.email}
            <button onClick={() => handleDelete(user.id)}>Supprimer</button>
          </li>
        ))}
      </ul>

      <h1>Ajouter un utilisateur</h1>
      <form onSubmit={handleSubmit}>
        <label>
          Nom :
          <input type="text" name="name" value={nom} onChange={(e) => setNom(e.target.value)} />
        </label>
        <label>
          Mail :
          <input type="email" name="mail" value={mail} onChange={(e) => setMail(e.target.value)} />
        </label>
        <input type="submit" value="Envoyer" />
      </form>
    </div>
  );
}

export default App;
